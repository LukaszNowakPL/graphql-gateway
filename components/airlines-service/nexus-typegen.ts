/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Aircraft: { // root type
    capacity: number; // Int!
    id: number; // Int!
    manufacturerId: number; // Int!
    name: string; // String!
  }
  Airline: { // root type
    countryOfRegistration: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  Manufacturer: { // root type
    country: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Query: {};
  Route: { // root type
    airlineId: number; // Int!
    arr: string; // String!
    dep: string; // String!
    flightNumber: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Aircraft: { // field return type
    airlines: NexusGenRootTypes['Airline'][]; // [Airline!]!
    capacity: number; // Int!
    id: number; // Int!
    manufacturer: NexusGenRootTypes['Manufacturer']; // Manufacturer!
    manufacturerId: number; // Int!
    name: string; // String!
  }
  Airline: { // field return type
    aircrafts: NexusGenRootTypes['Aircraft'][]; // [Aircraft!]!
    countryOfRegistration: number; // Int!
    id: number; // Int!
    name: string; // String!
    routes: NexusGenRootTypes['Route'][]; // [Route!]!
  }
  Manufacturer: { // field return type
    aircrafts: NexusGenRootTypes['Aircraft'][]; // [Aircraft!]!
    country: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  Mutation: { // field return type
    postAirline: NexusGenRootTypes['Airline']; // Airline!
  }
  Query: { // field return type
    airline: NexusGenRootTypes['Airline']; // Airline!
    airlines: NexusGenRootTypes['Airline'][]; // [Airline!]!
  }
  Route: { // field return type
    airline: NexusGenRootTypes['Airline']; // Airline!
    airlineId: number; // Int!
    arr: string; // String!
    dep: string; // String!
    flightNumber: string; // String!
    id: number; // Int!
  }
}

export interface NexusGenFieldTypeNames {
  Aircraft: { // field return type name
    airlines: 'Airline'
    capacity: 'Int'
    id: 'Int'
    manufacturer: 'Manufacturer'
    manufacturerId: 'Int'
    name: 'String'
  }
  Airline: { // field return type name
    aircrafts: 'Aircraft'
    countryOfRegistration: 'Int'
    id: 'Int'
    name: 'String'
    routes: 'Route'
  }
  Manufacturer: { // field return type name
    aircrafts: 'Aircraft'
    country: 'Int'
    id: 'Int'
    name: 'String'
  }
  Mutation: { // field return type name
    postAirline: 'Airline'
  }
  Query: { // field return type name
    airline: 'Airline'
    airlines: 'Airline'
  }
  Route: { // field return type name
    airline: 'Airline'
    airlineId: 'Int'
    arr: 'String'
    dep: 'String'
    flightNumber: 'String'
    id: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    postAirline: { // args
      countryOfRegistration: number; // Int!
      name: string; // String!
    }
  }
  Query: {
    airline: { // args
      id: number; // Int!
    }
    airlines: { // args
      airport: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}