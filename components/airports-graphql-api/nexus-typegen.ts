/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as t from "./src/services/airportsService/types"
import type { Context } from "./src/context"
import type { AirportsApiAirport } from "./src/graphql/Airport/types"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Airport: AirportsApiAirport;
  City: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Country: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Query: {};
  Service: { // root type
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Airport: { // field return type
    city: NexusGenRootTypes['City']; // City!
    country: NexusGenRootTypes['Country']; // Country!
    iata: string; // String!
    id: number; // Int!
    name: string; // String!
    paxAmount: number | null; // Int
    services: NexusGenRootTypes['Service'][]; // [Service!]!
  }
  City: { // field return type
    airports: NexusGenRootTypes['Airport'][]; // [Airport!]!
    id: number; // Int!
    name: string; // String!
  }
  Country: { // field return type
    airports: NexusGenRootTypes['Airport'][]; // [Airport!]!
    cities: NexusGenRootTypes['City'][]; // [City!]!
    id: number; // Int!
    name: string; // String!
  }
  Query: { // field return type
    airport: NexusGenRootTypes['Airport']; // Airport!
    airports: NexusGenRootTypes['Airport'][]; // [Airport!]!
    countries: NexusGenRootTypes['Country'][]; // [Country!]!
    country: NexusGenRootTypes['Country']; // Country!
  }
  Service: { // field return type
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Airport: { // field return type name
    city: 'City'
    country: 'Country'
    iata: 'String'
    id: 'Int'
    name: 'String'
    paxAmount: 'Int'
    services: 'Service'
  }
  City: { // field return type name
    airports: 'Airport'
    id: 'Int'
    name: 'String'
  }
  Country: { // field return type name
    airports: 'Airport'
    cities: 'City'
    id: 'Int'
    name: 'String'
  }
  Query: { // field return type name
    airport: 'Airport'
    airports: 'Airport'
    countries: 'Country'
    country: 'Country'
  }
  Service: { // field return type name
    id: 'Int'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    airport: { // args
      iata?: string | null; // String
      id?: number | null; // Int
    }
    country: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}